sort1 random50k - 8.829s
sort2 random50k - 2.155s
sort3 random50k - 4.994s

sort1 reversed50k - 7.107s
sort2 reversed50k - 1.541s
sort3 reversed50k - 4.774s

sort1 sorted50k - 2.900s
sort2 sorted50k - 2.744s
sort3 sorted50k - 4.969s

sort1 uses: bubble sort

How do you know?: bubble sort takes the least time when data is already sorted compared to random/reversed [Ω ( n ) - Bubble Sort].

sort2 uses: merge sort

How do you know?: maintains same time for all the datas i.e sorted/reversed/random and is faster than sort3 [Θ ( n logn ) - Merge Sort].

sort3 uses: selection sort

How do you know?: maintains same time for all the datas and is slower than sort2 [Θ ( n^2 ) - Selection Sort].
